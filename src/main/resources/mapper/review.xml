<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.ssafy.edu.review.model.dao.ReviewMapper">

	<select id="planList" parameterType="String"
		resultType="myPlanResponseDto">
		select p.plan_id, p.member_id, p.title, p.start_date,
		p.end_date,
		p.contents, (
		select count(*) from review r
		where p.plan_id =
		r.plan_id and r.status = 'Y'
		) as isReviewExist
		from
		plan p
		where
		member_id = #{id} and status = 'Y'
	</select>

	<select id="myPlanReview" parameterType="String"
		resultType="myPlanReviewResponseEntity">
		select p.plan_id, p.member_id, p.title, p.start_date,
		p.end_date, p.contents, a.content_id, plan_date, i.title as
		attraction_title, i.content_type_id
		from plan p
		join plan_attraction a
		on p.plan_id = a.plan_id
		join attraction_info i on a.content_id =
		i.content_id
		where p.plan_id = #{pid}
		order by plan_attraction_id ASC,
		plan_date ASC;
	</select>

	<insert id="registReview" parameterType="reviewRegistRequestDto">
		insert into review (member_id, plan_id, title)
		values(#{member_id},
		#{plan_id}, #{title})
		<selectKey resultType="long" keyProperty="review_id"
			order="AFTER">
			select last_insert_id()
		</selectKey>
	</insert>

	<insert id="registReviewContent"
		parameterType="reviewContentRegistDto">
		insert into review_content (review_id, contents,
		review_date)
		values(#{review_id}, #{contents}, #{review_date})
	</insert>

	<select id="reviewList" resultType="reviewListResponseDto">
		select r.review_id, r.title,
		p.start_date, p.end_date
		from review r
		inner join plan p on r.plan_id =
		p.plan_id
		where r.status = 'Y' and p.status = 'Y';
	</select>

	<select id="getReview" resultType="singleReviewMapperDto"
		parameterType="Long">
		select r.title, r.hit, r.member_id, p.start_date,
		p.end_date,
		rc.review_date, rc.contents, ai.content_type_id, ai.title
		as attractionName,
		(
		select count(*) from likes l where r.member_id =
		l.member_id and r.review_id
		= l.review_id
		) as isLikeExist,
		(
		select
		count(*) from likes l where r.review_id = l.review_id
		) as likeCount
		from review r, review_content rc, plan p,
		plan_attraction
		pa,
		attraction_info ai
		where r.review_id = rc.review_id
		and r.plan_id =
		p.plan_id and pa.plan_id =
		p.plan_id and ai.content_id
		= pa.content_id
		and rc.review_date = pa.plan_date and r.review_id = #{id}
		order by
		rc.review_date asc, rc.review_content_id asc;
	</select>

	<update id="modifyReview" parameterType="reviewRegistRequestDto">
		update review set
		title =
		#{title}
		where review_id = #{review_id}
	</update>

	<update id="modifyReviewContents"
		parameterType="reviewModifyModel">
		update review_content set
		contents = #{contents}
		where
		review_id = #{review_id} and review_date = #{review_date}
	</update>

	<update id="deleteReview" parameterType="Long">
		update review set status
		='N'
		where review_id = #{id};
	</update>

	<update id="updateHit" parameterType="Long">
		update review set hit = hit
		+ 1
		where review_id = #{id}
	</update>

	<insert id="updateLike" parameterType="reviewLikeRequestDto">
		insert into likes
		(member_id, review_id)
		values(#{member_id}, #{review_id})
	</insert>

	<delete id="deleteLike" parameterType="reviewLikeRequestDto">
		delete from likes
		where
		member_id = #{member_id} and review_id = #{review_id}
	</delete>

	<select id="getComments" parameterType="Long"
		resultType="reviewCommentsResponseDto">
		select member_id, contents from comments
		where status = 'Y'
		and review_id = #{id};
	</select>

	<insert id="registComments" parameterType="reviewCommentsRequestDto">
		insert into comments
		(member_id, review_id, contents)
		values(#{member_id}, #{review_id}, #{contents})
	</insert>
</mapper>
